// Mocks generated by Mockito 5.4.4 from annotations
// in rank_assessment/test/features/credit_card_capture/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rank_assessment/features/credit_card_capture/data/data_sources/app_database.dart'
    as _i13;
import 'package:rank_assessment/features/credit_card_capture/data/data_sources/DAO/card_dao.dart'
    as _i2;
import 'package:rank_assessment/features/credit_card_capture/data/data_sources/DAO/country_dao.dart'
    as _i3;
import 'package:rank_assessment/features/credit_card_capture/data/models/card_model.dart'
    as _i17;
import 'package:rank_assessment/features/credit_card_capture/data/models/country_model.dart'
    as _i16;
import 'package:rank_assessment/features/credit_card_capture/domain/entities/card.dart'
    as _i11;
import 'package:rank_assessment/features/credit_card_capture/domain/entities/country.dart'
    as _i7;
import 'package:rank_assessment/features/credit_card_capture/domain/repositories/card_repository.dart'
    as _i10;
import 'package:rank_assessment/features/credit_card_capture/domain/repositories/country_repository.dart'
    as _i12;
import 'package:rank_assessment/features/credit_card_capture/domain/usecases/get_card.dart'
    as _i14;
import 'package:rank_assessment/features/credit_card_capture/domain/usecases/get_country.dart'
    as _i6;
import 'package:rank_assessment/features/credit_card_capture/domain/usecases/save_card.dart'
    as _i15;
import 'package:rank_assessment/features/credit_card_capture/domain/usecases/save_country.dart'
    as _i8;
import 'package:rank_assessment/features/credit_card_capture/domain/usecases/update_country.dart'
    as _i9;
import 'package:sqflite/sqflite.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCardDao_0 extends _i1.SmartFake implements _i2.CardDao {
  _FakeCardDao_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCountryDao_1 extends _i1.SmartFake implements _i3.CountryDao {
  _FakeCountryDao_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_2<T> extends _i1.SmartFake
    implements _i4.StreamController<T> {
  _FakeStreamController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseExecutor_3 extends _i1.SmartFake
    implements _i5.DatabaseExecutor {
  _FakeDatabaseExecutor_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCountyUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCountyUseCase extends _i1.Mock implements _i6.GetCountyUseCase {
  MockGetCountyUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.CountryEntity>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<List<_i7.CountryEntity>>.value(<_i7.CountryEntity>[]),
      ) as _i4.Future<List<_i7.CountryEntity>>);
}

/// A class which mocks [SaveCountryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveCountryUseCase extends _i1.Mock
    implements _i8.SaveCountryUseCase {
  MockSaveCountryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call({_i7.CountryEntity? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [UpdateCountryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCountryUseCase extends _i1.Mock
    implements _i9.UpdateCountryUseCase {
  MockUpdateCountryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call({_i7.CountryEntity? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardRepository extends _i1.Mock implements _i10.CardRepository {
  MockCardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i11.CardEntity>> getSavedCards() => (super.noSuchMethod(
        Invocation.method(
          #getSavedCards,
          [],
        ),
        returnValue:
            _i4.Future<List<_i11.CardEntity>>.value(<_i11.CardEntity>[]),
      ) as _i4.Future<List<_i11.CardEntity>>);

  @override
  _i4.Future<void> saveCard(_i11.CardEntity? cardEntity) => (super.noSuchMethod(
        Invocation.method(
          #saveCard,
          [cardEntity],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CountryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountryRepository extends _i1.Mock implements _i12.CountryRepository {
  MockCountryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.CountryEntity>> getCountries() => (super.noSuchMethod(
        Invocation.method(
          #getCountries,
          [],
        ),
        returnValue:
            _i4.Future<List<_i7.CountryEntity>>.value(<_i7.CountryEntity>[]),
      ) as _i4.Future<List<_i7.CountryEntity>>);

  @override
  _i4.Future<void> saveCountry(_i7.CountryEntity? countryEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCountry,
          [countryEntity],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateCountry(_i7.CountryEntity? countryEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCountry,
          [countryEntity],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i13.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardDao get cardDao => (super.noSuchMethod(
        Invocation.getter(#cardDao),
        returnValue: _FakeCardDao_0(
          this,
          Invocation.getter(#cardDao),
        ),
      ) as _i2.CardDao);

  @override
  _i3.CountryDao get countryDao => (super.noSuchMethod(
        Invocation.getter(#countryDao),
        returnValue: _FakeCountryDao_1(
          this,
          Invocation.getter(#countryDao),
        ),
      ) as _i3.CountryDao);

  @override
  _i4.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_2<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i4.StreamController<String>);

  @override
  set changeListener(_i4.StreamController<String>? _changeListener) =>
      super.noSuchMethod(
        Invocation.setter(
          #changeListener,
          _changeListener,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_3(
          this,
          Invocation.getter(#database),
        ),
      ) as _i5.DatabaseExecutor);

  @override
  set database(_i5.DatabaseExecutor? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GetCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCardUseCase extends _i1.Mock implements _i14.GetCardUseCase {
  MockGetCardUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i11.CardEntity>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<List<_i11.CardEntity>>.value(<_i11.CardEntity>[]),
      ) as _i4.Future<List<_i11.CardEntity>>);
}

/// A class which mocks [SaveCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveCardUseCase extends _i1.Mock implements _i15.SaveCardUseCase {
  MockSaveCardUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call({_i11.CardEntity? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CountryDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountryDao extends _i1.Mock implements _i3.CountryDao {
  MockCountryDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> insertCountry(_i16.CountryModel? country) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertCountry,
          [country],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateCountry(_i16.CountryModel? country) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCountry,
          [country],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i16.CountryModel>> getCountries() => (super.noSuchMethod(
        Invocation.method(
          #getCountries,
          [],
        ),
        returnValue:
            _i4.Future<List<_i16.CountryModel>>.value(<_i16.CountryModel>[]),
      ) as _i4.Future<List<_i16.CountryModel>>);
}

/// A class which mocks [CardDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardDao extends _i1.Mock implements _i2.CardDao {
  MockCardDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> insertCard(_i17.CardModel? card) => (super.noSuchMethod(
        Invocation.method(
          #insertCard,
          [card],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i17.CardModel>> getSavedCards() => (super.noSuchMethod(
        Invocation.method(
          #getSavedCards,
          [],
        ),
        returnValue: _i4.Future<List<_i17.CardModel>>.value(<_i17.CardModel>[]),
      ) as _i4.Future<List<_i17.CardModel>>);
}
